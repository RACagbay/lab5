import java.util.Scanner;

class Node {
    int key;
    Node left, right;

    public Node(int value) {
        key = value;
        left = right = null;
    }
}

public class BinarySearchTree {
    private Node root;

    public BinarySearchTree() {
        root = null;
    }

    // Insertion
    public void insert(int key) {
        if (key == 0) {
            System.out.println("0 cannot be inserted into the binary search tree.");
            return;
        }
        root = insertRec(root, key);
        System.out.println("Current state after insertion: ");
        display();
    }

    private Node insertRec(Node root, int key) {
        if (root == null) {
            root = new Node(key);
            return root;
        }

        if (key < root.key)
            root.left = insertRec(root.left, key);
        else if (key > root.key)
            root.right = insertRec(root.right, key);

        return root;
    }

    // Deletion
    public void delete(int key) {
        root = deleteRec(root, key);
        System.out.println("Current state after deletion: ");
        display();
    }

    private Node deleteRec(Node root, int key) {
        if (root == null)
            return root;

        if (key < root.key)
            root.left = deleteRec(root.left, key);
        else if (key > root.key)
            root.right = deleteRec(root.right, key);
        else {
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;

            // Node with two children
            root.key = findMinValue(root.right);
            root.right = deleteRec(root.right, root.key);
        }

        return root;
    }

    private int findMinValue(Node root) {
        int minValue = root.key;
        while (root.left != null) {
            minValue = root.left.key;
            root = root.left;
        }
        return minValue;
    }

    // 1D Array Representation
    public int[] toArray() {
        int height = height(root);
        int size = (int) Math.pow(2, height) - 1;
        int[] array = new int[size];
        toArrayUtil(root, array, 0);
        return array;
    }

    private void toArrayUtil(Node root, int[] array, int index) {
        if (root != null && index < array.length) {
            toArrayUtil(root.left, array, 2 * index + 1);
            toArrayUtil(root.right, array, 2 * index + 2);
            array[index] = root.key;
        }
    }

    private int height(Node root) {
        if (root == null)
            return 0;
        else {
            int leftHeight = height(root.left);
            int rightHeight = height(root.right);

            return Math.max(leftHeight, rightHeight) + 1;
        }
    }

    // Traversals
    public void inorder(Node root) {
        if (root != null) {
            inorder(root.left);
            System.out.print(root.key + " ");
            inorder(root.right);
        }
    }

    public void preorder(Node root) {
        if (root != null) {
            System.out.print(root.key + " ");
            preorder(root.left);
            preorder(root.right);
        }
    }

    public void postorder(Node root) {
        if (root != null) {
            postorder(root.left);
            postorder(root.right);
            System.out.print(root.key + " ");
        }
    }

    public int size(Node root) {
        if (root == null)
            return 0;
        else
            return (size(root.left) + 1 + size(root.right));
    }

    public void display() {
        System.out.println("\nInorder Traversal:");
        inorder(root);
        System.out.println("\nPreorder Traversal:");
        preorder(root);
        System.out.println("\nPostorder Traversal:");
        postorder(root);
        System.out.println();
    }

    public void displayIndex() {
        int[] array = toArray();
        System.out.println("\nCurrent Index and Values:");
        for (int i = 0; i < array.length; i++) {
            System.out.println("Index " + i + ": " + array[i]);
        }
    }

    public static void main(String[] args) {
        BinarySearchTree bst = new BinarySearchTree();
        Scanner scanner = new Scanner(System.in);

        int option = 0;
        do {
            System.out.println("\n1. Insert");
            System.out.println("2. Delete");
            System.out.println("3. Display Traversals (Inorder, Preorder, Postorder)");
            System.out.println("4. Display Current Index");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");

            if (scanner.hasNextInt()) {
                option = scanner.nextInt();
                switch (option) {
                    case 1:
                        System.out.print("Enter the element to insert: ");
                        int element = scanner.nextInt();
                        bst.insert(element);
                        break;
                    case 2:
                        System.out.print("Enter the element to delete: ");
                        int deleteElement = scanner.nextInt();
                        bst.delete(deleteElement);
                        break;
                    case 3:
                        bst.display();
                        break;
                    case 4:
                        bst.displayIndex();
                        break;
                    case 5:
                        System.out.println("Exiting...");
                        break;
                    default:
                        System.out.println("Invalid option. Please try again.");
                }
            } else {
                System.out.println("Invalid input. Please enter a number.");
                scanner.next(); // Consume invalid input
            }
        } while (option != 5);
    }
}
